@using BankModel
@model Transaction
@{
    ViewData["Title"] = "TransferMoney";
    Layout = "~/Areas/Customer/Views/Shared/_Layout.cshtml";
    var confi = ViewBag.configuration;
    var tooltip = confi == null ? "Min: 100 <br> Max: 1000" : "Min: "+confi.MinValue+" <br> Max: "+confi.MaxValue;
    

    IEnumerable<Account> listAccount = (IEnumerable<Account>)@ViewBag.Account;

}

<!-- Start Transfer Area -->
<div class="transfer-area ptb-100">
    <div class="container">
        <form class="user-form">
            <div style="display: flex; align-items: center; justify-content: space-between;">
                <h3>Transaction</h3>
                @if (listAccount.Count() > 0)
                {
                    <h6>Balance:&nbsp;<span id="balanceAccount">@listAccount.FirstOrDefault().FormatAmount</span></h6>
                }
                else
                {
                }
            </div>
            <div class="row">
                <div class="col-12">
                    <div class="form-group">
                        <label>Your account</label>
                        <select id="fromAccount" onchange="bidingBalance()" class="form-control" asp-items="@(new SelectList(listAccount,"AccountNo","AccountNo"))">
                        </select>
                    </div>
                </div>
                <div class="col-12">
                    <div class="form-group">
                        <label>To Account</label>
                        <input id="toAccount" onchange="BindingToAccount()" class="form-control" type="text">
                        <span class="text-danger" id="modalErrorToAccount"></span>
                    </div>
                </div>
                <div id="receiver" class="col-12" hidden>
                    <div class="form-group">
                        <label>Receiver</label>
                        <input id="nameReceiver" readonly class="form-control" type="text">
                    </div>
                </div>
                <div class="col-12">
                    <div class="form-group">
                        <label style="display: flex; align-items: center;">
                            Amount&nbsp;<ejs-tooltip id="Tooltip" content="@tooltip">
                                <!-- Target element -->
                                <e-content-template>
                                    <i class="bi bi-question-circle"></i>
                                </e-content-template>
                            </ejs-tooltip>
                        </label>
                        <input onchange="checkAmount()" id="amount" class="form-control" type="text">
                        <div class="mt-3">
                            <button type="button" onclick="getBalance('100')" class="btn btn-success">100</button>
                            <button type="button" onclick="getBalance('200')" class="btn btn-success">200</button>
                            <button type="button" onclick="getBalance('300')" class="btn btn-success">300</button>
                            <button type="button" onclick="getBalance('400')" class="btn btn-success">400</button>
                            <button type="button" onclick="getBalance('500')" class="btn btn-success">500</button>
                            <button type="button" onclick="getBalance('600')" class="btn btn-success">600</button>
                        </div>
                        <span class="text-danger" id="msg"></span>
                        <span class="text-danger" id="modalErrorAmount"></span>
                    </div>
                </div>
                <div class="col-12">
                    <div class="form-group">
                        <label>Description</label>
                        <textarea id="description" rows="10" class="form-control" type="text">@ViewBag.Customer tranfers</textarea>
                    </div>
                </div>
                <div class="col-12">
                    <button class="default-btn" onclick="bindingModal()" type="button">
                        Transfer
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>

<div class="modal fade" id="tranferModel" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <form id="transferMoney">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Tranfers Detail</h5>
                    <button type="button" style="margin-left: 76%;margin-top: -13%;" class="btn btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div>
                        <label class="fw-bold">From Account</label>
                        <span id="modalFromAccount"></span>
                    </div>
                    <div>
                        <label class="fw-bold">To Account</label>
                        <span id="modalToAccount"></span>
                    </div>
                    <div>
                        <label class="fw-bold">Amount</label>
                        <span id="modalAmount"></span>
                    </div>
                    <div>
                        <label class="fw-bold">Description</label>
                        <span id="modalDescript"></span>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" id="tranferCloseModal" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Save changes</button>
                </div>
            </div>
        </div>
    </form>
</div>
<!-- End Transfer Area -->
@section Scripts{
    <script>
        let bindingModal = () => {
            var finalAmount = $('#amount').val();
            var fromAccount = $('#fromAccount').val()
            var toAccount = $('#toAccount').val()
            var amount = finalAmount
            var description = $('#description').val()
            if (toAccount == "" || amount == "") {
                $("#modalErrorToAccount").text("To account required")
                $("#modalErrorAmount").text("Amount required")
            } else {
                $("#modalFromAccount").text(fromAccount)
                $("#modalToAccount").text(toAccount)
                $("#modalAmount").text(amount)
                $("#modalDescript").text(description)
                $("#tranferModel").modal('show')
            }
        }
        let getBalance = (amount) => {
            $("#amount").val(amount)
            $("#msg").text("");
        }
        const amount = document.getElementById('amount');
        amount.addEventListener('keyup', (event) => {
            if (amount.value != "") {
                if (event.which >= 37 && event.which <= 40) return;

                amount.value = amount.value.replace(/\D/g, '')
                    .replace(/\B(?=(\d{3})+(?!\d))/g, ',');
            } else {
                amount.value = ""
            }

        })
        function BindingToAccount() {
            var toAccount = document.getElementById('toAccount').value;
            var receiver = document.getElementById('receiver')
            var nameReceiver = document.getElementById('nameReceiver')
            $.ajax({
                url: "/BindingToAccount",
                type: "GET",
                data: { toAccount: toAccount },
                success: function (respone) {
                    if (respone.success) {
                        receiver.removeAttribute('hidden')
                        nameReceiver.value = respone.data;
                    } else {
                        receiver.setAttribute('hidden', true)
                        Swal.fire(respone.data);
                    }
                }
            })
        }

        function checkAmount() {
            var FromAccount = document.getElementById('fromAccount').value
            var msg = document.getElementById('msg')
            var amount = document.getElementById('amount').value
            $.ajax({
                url: "/checkAmount",
                type: "GET",
                data: { fromAccount: FromAccount, amount: amount },
                success: function (respone) {
                    if (respone.success) {
                        msg.innerHTML = "";
                    } else {
                        msg.innerHTML = `<i style="font-size: 14px;" class="bi bi-info-circle"></i>&nbsp;` + respone.msg;
                    }
                }
            })
        }

        $('#transferMoney').on('submit', function (e) {
            $("#tranferCloseModal").trigger("click")
            e.preventDefault();
            var msg = document.getElementById("msg");
            var finalAmount = $('#amount').val().replace(",", "");
            var transaction = {
                fromAccount: $('#fromAccount').val(),
                toAccount: $('#toAccount').val(),
                amount: finalAmount,
                description: $('#description').val()
            }

            Swal.fire({
                title: "Enter your pincode ",
                text: "Pin",
                input: 'password',
                showCancelButton: true,
                confirmButtonColor: 'green',
                returnFocus: false
            }).then((result) => {
                if (result.isConfirmed) {
                    if (result.value != "") {
                        $.ajax({
                            type: "GET",
                            url: "/CheckPinCode",
                            data: { pincode: result.value, account: $('#fromAccount').val() },
                            success: function (response) {
                                if (response.success) {
                                    Swal.fire({
                                        title: "Please wait...",
                                        showConfirmButton: false,
                                        didOpen: () => {
                                            Swal.showLoading()
                                        },
                                    })
                                    $.ajax({
                                        type: "POST",
                                        url: "/PostTransaction",
                                        data: { transaction: transaction },
                                        success: function (response) {
                                            if (response.success) {
                                                $(window).scrollTop(300);
                                                setTimeout(() => { window.location.href = response.url }, 3000)
                                            } else {
                                                Swal.fire("Fails")
                                            }
                                        }
                                    })
                                } else {
                                    Swal.fire(response.msg)
                                }
                            }
                        })
                    }
                    else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: 'Please enter pin!',
                        })
                    }
                }
            });
        })

        function bidingBalance() {
            var accountNo = $('#fromAccount').val();
            var balanceAccount = document.getElementById('balanceAccount');
            $.ajax({
                type: "GET",
                url: "/bindingBalance",
                data: { accountNo: accountNo },
                success: (res) => {
                    if (res.success) {
                        balanceAccount.innerHTML = res.balance;
                    }
                }

            })
        }

    </script>

}

